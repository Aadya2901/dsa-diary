2

Search(nums, target):
    left = 0
    right = length(nums) - 1

    while left <= right:
        mid = (left + right) // 2

        if nums[mid] == target:
            return mid

        # Left half is sorted
        if nums[left] <= nums[mid]:
            if nums[left] <= target < nums[mid]:
                right = mid - 1
            else:
                left = mid + 1
        # Right half is sorted
        else:
            if nums[mid] < target <= nums[right]:
                left = mid + 1
            else:
                right = mid - 1

    return -1

3

MaxProfit(prices):
    minPrice = infinity
    maxProfit = 0

    for price in prices:
        if price < minPrice:
            minPrice = price
        else:
            profit = price - minPrice
            if profit > maxProfit:
                maxProfit = profit

    return maxProfit

4

Trap(height):
    n = length(height)
    if n == 0: return 0

    leftMax = array of size n
    rightMax = array of size n

    leftMax[0] = height[0]
    for i = 1 to n-1:
        leftMax[i] = max(leftMax[i-1], height[i])

    rightMax[n-1] = height[n-1]
    for i = n-2 down to 0:
        rightMax[i] = max(rightMax[i+1], height[i])

    trappedWater = 0
    for i = 0 to n-1:
        trappedWater += min(leftMax[i], rightMax[i]) - height[i]

    return trappedWater

5

ThreeSum(nums):
    sort(nums)
    result = []

    for i = 0 to length(nums)-3:
        if i > 0 and nums[i] == nums[i-1]: continue

        left = i + 1
        right = length(nums) - 1

        while left < right:
            sum = nums[i] + nums[left] + nums[right]
            if sum == 0:
                result.append([nums[i], nums[left], nums[right]])
                while left < right and nums[left] == nums[left+1]: left += 1
                while left < right and nums[right] == nums[right-1]: right -= 1
                left += 1
                right -= 1
            elif sum < 0:
                left += 1
            else:
                right -= 1

    return result
